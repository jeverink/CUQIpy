
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "user/_auto_howtos/Deconvolution2D.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_user__auto_howtos_Deconvolution2D.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_user__auto_howtos_Deconvolution2D.py:


2D Deconvolution
================

In this example we show how to quantify the uncertainty of a solution to a 2D deconvolution problem.

.. GENERATED FROM PYTHON SOURCE LINES 8-9

First we import the modules needed.

.. GENERATED FROM PYTHON SOURCE LINES 9-14

.. code-block:: default


    import numpy as np
    from cuqi.testproblem import Deconvolution2D
    from cuqi.distribution import Gaussian, LMRF
    from cuqi.problem import BayesianProblem







.. GENERATED FROM PYTHON SOURCE LINES 15-32

Step 1: Deterministic model
---------------------------

Consider the deterministic inverse problem

.. math::

  \mathbf{y} = \mathbf{A} \mathbf{x}

where :math:`\mathbf{A}` is a matrix representing a 2D convolution operation and
:math:`\mathbf{y}` and :math:`\mathbf{x}` are the data and unknown (solution to the inverse problem) respectively.

A linear forward model like :math:`\mathbf{A}` is represented by a :class:`~cuqi.model.LinearModel`
and any data (like some observed data :math:`\mathbf{y}^\mathrm{obs}`) as a :class:`~cuqi.array.CUQIarray`.

The easiest way to get these two components is to use the built-in testproblems.
Let us extract the model and data for a 2D deconvolution.

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: default


    A, y_obs, info = Deconvolution2D.get_components()








.. GENERATED FROM PYTHON SOURCE LINES 36-53

Step 2: Prior model
-------------------

Now we aim to represent our prior knowledge of the unknown image. In this case, let us assume
that the unknown is piecewise constant. This can be modelled by assuming a Laplace difference
prior. The Laplace difference prior can be defined as

.. math::

  \mathbf{x}_{i,j}-\mathbf{x}_{i',j} \sim \mathrm{Laplace}(0, \delta),\\
  \mathbf{x}_{i,j}-\mathbf{x}_{i,j'} \sim \mathrm{Laplace}(0, \delta),

where :math:`\delta` is the scale parameter defining how likely jumps from one pixel value
to another are in the horizontal and vertical directions.

This distribution comes pre-defined in CUQIpy as the :class:`cuqi.distribution.LMRF`.
Notice we have to specify the geometry of the unknown.

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default


    x = LMRF(location=0, scale=0.1, geometry=A.domain_geometry)








.. GENERATED FROM PYTHON SOURCE LINES 57-70

Step 3: Likelihood model
------------------------

Suppose our data is corrupted by a Gaussian noise so our observational model is

.. math::

  \mathbf{y}\mid \mathbf{x} \sim \mathcal{N}(\mathbf{A} \mathbf{x}, \sigma^2),

where :math:`\sigma^2` is a noise variance that we know.

We can represent :math:`\mathbf{y}\mid \mathbf{x}` as a :class:`cuqi.distribution.Distribution` object.
We often call the distribution of :math:`\mathbf{y}\mid \mathbf{x}` the data distribution.

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: default


    y = Gaussian(mean=A@x, cov=0.01)








.. GENERATED FROM PYTHON SOURCE LINES 74-86

Step 4: Posterior sampling
--------------------------
In actuality we are interested in conditioning on the observed data :math:`\mathbf{y}^\mathrm{obs}`,
to obtain the posterior distribution

.. math::

  p(\mathbf{x}|\mathbf{y}^\mathrm{obs}) \propto p(\mathbf{y}^\mathrm{obs}|\mathbf{x})p(\mathbf{x}),

and then sampling from this posterior distribution.

In CUQIpy, we the easiest way to do this is to use the :class:`cuqi.problem.BayesianProblem` class.

.. GENERATED FROM PYTHON SOURCE LINES 86-90

.. code-block:: default


    # Create Bayesian problem and set observed data (conditioning)
    BP = BayesianProblem(y, x).set_data(y=y_obs)








.. GENERATED FROM PYTHON SOURCE LINES 91-93

After setting the data, we can sample from the posterior using the :meth:`cuqi.problem.BayesianProblem.sample_posterior`
method. Notice that a well-suited sampler is automatically chosen based on the model, likelihood and prior chosen.

.. GENERATED FROM PYTHON SOURCE LINES 93-97

.. code-block:: default


    # Sample posterior
    samples = BP.sample_posterior(200)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!! Automatic sampler selection is experimental. !!!
    !!!    Always validate the computed results.     !!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    Using UGLA sampler
    burn-in: 20%
    Sample 2 / 240    Sample 4 / 240    Sample 6 / 240    Sample 8 / 240    Sample 10 / 240    Sample 12 / 240    Sample 14 / 240    Sample 16 / 240    Sample 18 / 240    Sample 20 / 240    Sample 22 / 240    Sample 24 / 240    Sample 26 / 240    Sample 28 / 240    Sample 30 / 240    Sample 32 / 240    Sample 34 / 240    Sample 36 / 240    Sample 38 / 240    Sample 40 / 240    Sample 42 / 240    Sample 44 / 240    Sample 46 / 240    Sample 48 / 240    Sample 50 / 240    Sample 52 / 240    Sample 54 / 240    Sample 56 / 240    Sample 58 / 240    Sample 60 / 240    Sample 62 / 240    Sample 64 / 240    Sample 66 / 240    Sample 68 / 240    Sample 70 / 240    Sample 72 / 240    Sample 74 / 240    Sample 76 / 240    Sample 78 / 240    Sample 80 / 240    Sample 82 / 240    Sample 84 / 240    Sample 86 / 240    Sample 88 / 240    Sample 90 / 240    Sample 92 / 240    Sample 94 / 240    Sample 96 / 240    Sample 98 / 240    Sample 100 / 240    Sample 102 / 240    Sample 104 / 240    Sample 106 / 240    Sample 108 / 240    Sample 110 / 240    Sample 112 / 240    Sample 114 / 240    Sample 116 / 240    Sample 118 / 240    Sample 120 / 240    Sample 122 / 240    Sample 124 / 240    Sample 126 / 240    Sample 128 / 240    Sample 130 / 240    Sample 132 / 240    Sample 134 / 240    Sample 136 / 240    Sample 138 / 240    Sample 140 / 240    Sample 142 / 240    Sample 144 / 240    Sample 146 / 240    Sample 148 / 240    Sample 150 / 240    Sample 152 / 240    Sample 154 / 240    Sample 156 / 240    Sample 158 / 240    Sample 160 / 240    Sample 162 / 240    Sample 164 / 240    Sample 166 / 240    Sample 168 / 240    Sample 170 / 240    Sample 172 / 240    Sample 174 / 240    Sample 176 / 240    Sample 178 / 240    Sample 180 / 240    Sample 182 / 240    Sample 184 / 240    Sample 186 / 240    Sample 188 / 240    Sample 190 / 240    Sample 192 / 240    Sample 194 / 240    Sample 196 / 240    Sample 198 / 240    Sample 200 / 240    Sample 202 / 240    Sample 204 / 240    Sample 206 / 240    Sample 208 / 240    Sample 210 / 240    Sample 212 / 240    Sample 214 / 240    Sample 216 / 240    Sample 218 / 240    Sample 220 / 240    Sample 222 / 240    Sample 224 / 240    Sample 226 / 240    Sample 228 / 240    Sample 230 / 240    Sample 232 / 240    Sample 234 / 240    Sample 236 / 240    Sample 238 / 240    Sample 240 / 240    Sample 240 / 240
    Elapsed time: 32.608368158340454




.. GENERATED FROM PYTHON SOURCE LINES 98-103

Step 5: Posterior analysis
--------------------------

Finally, after sampling we can analyze the posterior. There are many options here. For example,
we can plot the credible intervals for the unknown image and compare it to the true image.

.. GENERATED FROM PYTHON SOURCE LINES 103-105

.. code-block:: default


    ax = samples.plot_ci(exact=info.exactSolution)



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /user/_auto_howtos/images/sphx_glr_Deconvolution2D_001.png
         :alt: Sample mean
         :srcset: /user/_auto_howtos/images/sphx_glr_Deconvolution2D_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /user/_auto_howtos/images/sphx_glr_Deconvolution2D_002.png
         :alt: Exact
         :srcset: /user/_auto_howtos/images/sphx_glr_Deconvolution2D_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /user/_auto_howtos/images/sphx_glr_Deconvolution2D_003.png
         :alt: Width of credibility interval
         :srcset: /user/_auto_howtos/images/sphx_glr_Deconvolution2D_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /user/_auto_howtos/images/sphx_glr_Deconvolution2D_004.png
         :alt: Upper credibility interval limit
         :srcset: /user/_auto_howtos/images/sphx_glr_Deconvolution2D_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /user/_auto_howtos/images/sphx_glr_Deconvolution2D_005.png
         :alt: Lower credibility interval limit
         :srcset: /user/_auto_howtos/images/sphx_glr_Deconvolution2D_005.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 33.102 seconds)


.. _sphx_glr_download_user__auto_howtos_Deconvolution2D.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: Deconvolution2D.py <Deconvolution2D.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: Deconvolution2D.ipynb <Deconvolution2D.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
