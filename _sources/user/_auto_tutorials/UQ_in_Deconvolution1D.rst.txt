
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "user/_auto_tutorials/UQ_in_Deconvolution1D.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_user__auto_tutorials_UQ_in_Deconvolution1D.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_user__auto_tutorials_UQ_in_Deconvolution1D.py:


Uncertainty Quantification in one-dimensional deconvolution
===========================================================

    This tutorial walks through the process of solving a simple 1D 
    deconvolution problem in a Bayesian setting. It also shows how
    to define such a convolution model in CUQIpy.

.. GENERATED FROM PYTHON SOURCE LINES 11-14

Setup
-----
We start by importing the necessary modules

.. GENERATED FROM PYTHON SOURCE LINES 14-19

.. code-block:: default


    import cuqi
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 20-37

Setting up the forward model
----------------------------
We start by defining the forward model. In this case, we will use a simple
convolution model. The forward model is defined by the following equation:

.. math::
   \mathbf{y} = \mathbf{A} \mathbf{x}

where :math:`\mathbf{y}` is the data, :math:`\mathbf{A}` is the convolution (forward model)
operator, and :math:`\mathbf{x}` is the solution.

The easiest way to define the forward model is to use the testproblem module.
This module contains a number of pre-defined test problems that contain the
forward model and synthetic data. In this case, we will use the
:class:`cuqi.testproblem.Deconvolution1D` test problem. We extract the forward model
and synthetic data from the test problem by calling the :func:`get_components` static
method.

.. GENERATED FROM PYTHON SOURCE LINES 37-41

.. code-block:: default


    # Forward model and data
    A, y_data, info = cuqi.testproblem.Deconvolution1D.get_components()








.. GENERATED FROM PYTHON SOURCE LINES 42-49

There are many parameters that can be set when creating the test problem. For more details
see the :class:`cuqi.testproblem.Deconvolution1D` documentation. In this case, we will use
the default parameters. The :func:`get_components` method returns the forward model, 
synthetic data, and a :class:`~ProblemInfo` object that contains information about the 
test problem.

Let's take a look at the forward model

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default


    print(A)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    CUQI LinearModel: Continuous1D(128,) -> Continuous1D(128,).
        Forward parameters: ['x'].




.. GENERATED FROM PYTHON SOURCE LINES 53-57

We see that the forward model is a a :class:`~cuqi.model.LinearModel` object. This
object contains the forward model and the adjoint model. We also see that the domain and
range of the forward model are both continuous 1D spaces. Finally, we see that the default
forward parameters are set to :math:`\mathbf{x}`.

.. GENERATED FROM PYTHON SOURCE LINES 59-61

Let's take a look at the synthetic data and compare with the exact solution
that we can find in the :class:`~ProblemInfo` object.

.. GENERATED FROM PYTHON SOURCE LINES 61-67

.. code-block:: default


    y_data.plot(label="Synthetic data")
    info.exactSolution.plot(label="Exact solution")
    plt.title("Deconvolution 1D problem")
    plt.legend()




.. image-sg:: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_001.png
   :alt: Deconvolution 1D problem
   :srcset: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f0e996f7580>



.. GENERATED FROM PYTHON SOURCE LINES 68-74

Setting up the prior
--------------------

We now need to define the prior distribution for the solution. In this case, we will use
a Gaussian Markov Random Field (GMRF) prior. For more details on the GMRF prior, see the
:class:`cuqi.distribution.GMRF` documentation.

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: default


    x = cuqi.distribution.GMRF(np.zeros(A.domain_dim), 200)









.. GENERATED FROM PYTHON SOURCE LINES 79-84

Setting up the likelihood
-------------------------

We now need to define the likelihood. First let us take a look at the information provided
by the test problem.

.. GENERATED FROM PYTHON SOURCE LINES 84-87

.. code-block:: default


    print(info.infoString)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Noise type: Additive Gaussian with std: 0.01




.. GENERATED FROM PYTHON SOURCE LINES 88-91

We see that the noise level is known and that the noise is Gaussian. We can use this
information to define the likelihood. In this case, we will use a :class:`~cuqi.distribution.Gaussian`
distribution.

.. GENERATED FROM PYTHON SOURCE LINES 91-94

.. code-block:: default


    y = cuqi.distribution.Gaussian(A @ x, 0.01**2)








.. GENERATED FROM PYTHON SOURCE LINES 95-101

Bayesian problem (Joint distribution)
-------------------------------------

After defining the prior and likelihood, we can now define the Bayesian problem. The
Bayesian problem is defined by the joint distribution of the solution and the data.
This can be seen when we print the Bayesian problem.

.. GENERATED FROM PYTHON SOURCE LINES 101-106

.. code-block:: default


    BP = cuqi.problem.BayesianProblem(y, x)

    print(BP)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    BayesianProblem with target: 
     JointDistribution(
        Equation: 
            p(y,x) = p(y|x)p(x)
        Densities: 
            y ~ CUQI Gaussian. Conditioning variables ['x'].
            x ~ CUQI GMRF.
    )




.. GENERATED FROM PYTHON SOURCE LINES 107-111

Setting the data (posterior)
----------------------------

Now to set the data, we need to call the :func:`~cuqi.problem.BayesianProblem.set_data`

.. GENERATED FROM PYTHON SOURCE LINES 111-116

.. code-block:: default


    BP.set_data(y=y_data)

    print(BP)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    BayesianProblem with target: 
     Posterior(
        Equation:
             p(x|y) ‚àù L(x|y)p(x)
        Densities:
            y ~ CUQI Gaussian Likelihood function. Parameters ['x'].
            x ~ CUQI GMRF.
     )




.. GENERATED FROM PYTHON SOURCE LINES 117-121

Sampling from the posterior
---------------------------

We can then use the automatic sampling method to sample from the posterior distribution.

.. GENERATED FROM PYTHON SOURCE LINES 121-124

.. code-block:: default


    samples = BP.sample_posterior(1000)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!! Automatic sampler selection is experimental. !!!
    !!!    Always validate the computed results.     !!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    Using LinearRTO sampler.
    burn-in: 20%
    Sample 12 / 1200    Sample 24 / 1200    Sample 36 / 1200    Sample 48 / 1200    Sample 60 / 1200    Sample 72 / 1200    Sample 84 / 1200    Sample 96 / 1200    Sample 108 / 1200    Sample 120 / 1200    Sample 132 / 1200    Sample 144 / 1200    Sample 156 / 1200    Sample 168 / 1200    Sample 180 / 1200    Sample 192 / 1200    Sample 204 / 1200    Sample 216 / 1200    Sample 228 / 1200    Sample 240 / 1200    Sample 252 / 1200    Sample 264 / 1200    Sample 276 / 1200    Sample 288 / 1200    Sample 300 / 1200    Sample 312 / 1200    Sample 324 / 1200    Sample 336 / 1200    Sample 348 / 1200    Sample 360 / 1200    Sample 372 / 1200    Sample 384 / 1200    Sample 396 / 1200    Sample 408 / 1200    Sample 420 / 1200    Sample 432 / 1200    Sample 444 / 1200    Sample 456 / 1200    Sample 468 / 1200    Sample 480 / 1200    Sample 492 / 1200    Sample 504 / 1200    Sample 516 / 1200    Sample 528 / 1200    Sample 540 / 1200    Sample 552 / 1200    Sample 564 / 1200    Sample 576 / 1200    Sample 588 / 1200    Sample 600 / 1200    Sample 612 / 1200    Sample 624 / 1200    Sample 636 / 1200    Sample 648 / 1200    Sample 660 / 1200    Sample 672 / 1200    Sample 684 / 1200    Sample 696 / 1200    Sample 708 / 1200    Sample 720 / 1200    Sample 732 / 1200    Sample 744 / 1200    Sample 756 / 1200    Sample 768 / 1200    Sample 780 / 1200    Sample 792 / 1200    Sample 804 / 1200    Sample 816 / 1200    Sample 828 / 1200    Sample 840 / 1200    Sample 852 / 1200    Sample 864 / 1200    Sample 876 / 1200    Sample 888 / 1200    Sample 900 / 1200    Sample 912 / 1200    Sample 924 / 1200    Sample 936 / 1200    Sample 948 / 1200    Sample 960 / 1200    Sample 972 / 1200    Sample 984 / 1200    Sample 996 / 1200    Sample 1008 / 1200    Sample 1020 / 1200    Sample 1032 / 1200    Sample 1044 / 1200    Sample 1056 / 1200    Sample 1068 / 1200    Sample 1080 / 1200    Sample 1092 / 1200    Sample 1104 / 1200    Sample 1116 / 1200    Sample 1128 / 1200    Sample 1140 / 1200    Sample 1152 / 1200    Sample 1164 / 1200    Sample 1176 / 1200    Sample 1188 / 1200    Sample 1200 / 1200    Sample 1200 / 1200
    Elapsed time: 3.5032854080200195




.. GENERATED FROM PYTHON SOURCE LINES 125-127

Plotting the results
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 127-130

.. code-block:: default


    samples.plot_ci(exact=info.exactSolution)




.. image-sg:: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_002.png
   :alt: UQ in Deconvolution1D
   :srcset: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.lines.Line2D object at 0x7f0e99851330>, <matplotlib.lines.Line2D object at 0x7f0e99853670>, <matplotlib.collections.PolyCollection object at 0x7f0e998524d0>]



.. GENERATED FROM PYTHON SOURCE LINES 131-136

Unknown noise level
-------------------
In the previous example, we assumed that we knew the noise level of the data. In
many cases, this is not the case. If we do not know the noise level, we can
use a :class:`~cuqi.distribution.Gamma` distribution to model the noise level.

.. GENERATED FROM PYTHON SOURCE LINES 136-139

.. code-block:: default


    s = cuqi.distribution.Gamma(1, 1e-4)








.. GENERATED FROM PYTHON SOURCE LINES 140-142

Update likelihood with unknown noise level
------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 142-145

.. code-block:: default


    y = cuqi.distribution.Gaussian(A @ x, prec=lambda s: s)








.. GENERATED FROM PYTHON SOURCE LINES 146-148

Bayesian problem (Joint distribution)
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 148-153

.. code-block:: default


    BP = cuqi.problem.BayesianProblem(y, x, s)

    print(BP)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    BayesianProblem with target: 
     JointDistribution(
        Equation: 
            p(y,x,s) = p(y|x,s)p(x)p(s)
        Densities: 
            y ~ CUQI Gaussian. Conditioning variables ['x', 's'].
            x ~ CUQI GMRF.
            s ~ CUQI Gamma.
    )




.. GENERATED FROM PYTHON SOURCE LINES 154-157

Setting the data (posterior)
----------------------------


.. GENERATED FROM PYTHON SOURCE LINES 157-162

.. code-block:: default


    BP.set_data(y=y_data)

    print(BP)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    BayesianProblem with target: 
     JointDistribution(
        Equation: 
            p(x,s|y) ‚àù L(x,s|y)p(x)p(s)
        Densities: 
            y ~ CUQI Gaussian Likelihood function. Parameters ['x', 's'].
            x ~ CUQI GMRF.
            s ~ CUQI Gamma.
    )




.. GENERATED FROM PYTHON SOURCE LINES 163-165

Sampling from the posterior
---------------------------

.. GENERATED FROM PYTHON SOURCE LINES 165-169

.. code-block:: default


    samples = BP.sample_posterior(1000)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!! Automatic sampler selection is experimental. !!!
    !!!    Always validate the computed results.     !!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    Using Gibbs sampler
    burn-in: 20%

    Automatically determined sampling strategy:
            x: LinearRTO
            s: Conjugate

    Warmup 2 / 200    Warmup 4 / 200    Warmup 6 / 200    Warmup 8 / 200    Warmup 10 / 200    Warmup 12 / 200    Warmup 14 / 200    Warmup 16 / 200    Warmup 18 / 200    Warmup 20 / 200    Warmup 22 / 200    Warmup 24 / 200    Warmup 26 / 200    Warmup 28 / 200    Warmup 30 / 200    Warmup 32 / 200    Warmup 34 / 200    Warmup 36 / 200    Warmup 38 / 200    Warmup 40 / 200    Warmup 42 / 200    Warmup 44 / 200    Warmup 46 / 200    Warmup 48 / 200    Warmup 50 / 200    Warmup 52 / 200    Warmup 54 / 200    Warmup 56 / 200    Warmup 58 / 200    Warmup 60 / 200    Warmup 62 / 200    Warmup 64 / 200    Warmup 66 / 200    Warmup 68 / 200    Warmup 70 / 200    Warmup 72 / 200    Warmup 74 / 200    Warmup 76 / 200    Warmup 78 / 200    Warmup 80 / 200    Warmup 82 / 200    Warmup 84 / 200    Warmup 86 / 200    Warmup 88 / 200    Warmup 90 / 200    Warmup 92 / 200    Warmup 94 / 200    Warmup 96 / 200    Warmup 98 / 200    Warmup 100 / 200    Warmup 102 / 200    Warmup 104 / 200    Warmup 106 / 200    Warmup 108 / 200    Warmup 110 / 200    Warmup 112 / 200    Warmup 114 / 200    Warmup 116 / 200    Warmup 118 / 200    Warmup 120 / 200    Warmup 122 / 200    Warmup 124 / 200    Warmup 126 / 200    Warmup 128 / 200    Warmup 130 / 200    Warmup 132 / 200    Warmup 134 / 200    Warmup 136 / 200    Warmup 138 / 200    Warmup 140 / 200    Warmup 142 / 200    Warmup 144 / 200    Warmup 146 / 200    Warmup 148 / 200    Warmup 150 / 200    Warmup 152 / 200    Warmup 154 / 200    Warmup 156 / 200    Warmup 158 / 200    Warmup 160 / 200    Warmup 162 / 200    Warmup 164 / 200    Warmup 166 / 200    Warmup 168 / 200    Warmup 170 / 200    Warmup 172 / 200    Warmup 174 / 200    Warmup 176 / 200    Warmup 178 / 200    Warmup 180 / 200    Warmup 182 / 200    Warmup 184 / 200    Warmup 186 / 200    Warmup 188 / 200    Warmup 190 / 200    Warmup 192 / 200    Warmup 194 / 200    Warmup 196 / 200    Warmup 198 / 200    Warmup 200 / 200    Warmup 200 / 200
    Sample 10 / 1000    Sample 20 / 1000    Sample 30 / 1000    Sample 40 / 1000    Sample 50 / 1000    Sample 60 / 1000    Sample 70 / 1000    Sample 80 / 1000    Sample 90 / 1000    Sample 100 / 1000    Sample 110 / 1000    Sample 120 / 1000    Sample 130 / 1000    Sample 140 / 1000    Sample 150 / 1000    Sample 160 / 1000    Sample 170 / 1000    Sample 180 / 1000    Sample 190 / 1000    Sample 200 / 1000    Sample 210 / 1000    Sample 220 / 1000    Sample 230 / 1000    Sample 240 / 1000    Sample 250 / 1000    Sample 260 / 1000    Sample 270 / 1000    Sample 280 / 1000    Sample 290 / 1000    Sample 300 / 1000    Sample 310 / 1000    Sample 320 / 1000    Sample 330 / 1000    Sample 340 / 1000    Sample 350 / 1000    Sample 360 / 1000    Sample 370 / 1000    Sample 380 / 1000    Sample 390 / 1000    Sample 400 / 1000    Sample 410 / 1000    Sample 420 / 1000    Sample 430 / 1000    Sample 440 / 1000    Sample 450 / 1000    Sample 460 / 1000    Sample 470 / 1000    Sample 480 / 1000    Sample 490 / 1000    Sample 500 / 1000    Sample 510 / 1000    Sample 520 / 1000    Sample 530 / 1000    Sample 540 / 1000    Sample 550 / 1000    Sample 560 / 1000    Sample 570 / 1000    Sample 580 / 1000    Sample 590 / 1000    Sample 600 / 1000    Sample 610 / 1000    Sample 620 / 1000    Sample 630 / 1000    Sample 640 / 1000    Sample 650 / 1000    Sample 660 / 1000    Sample 670 / 1000    Sample 680 / 1000    Sample 690 / 1000    Sample 700 / 1000    Sample 710 / 1000    Sample 720 / 1000    Sample 730 / 1000    Sample 740 / 1000    Sample 750 / 1000    Sample 760 / 1000    Sample 770 / 1000    Sample 780 / 1000    Sample 790 / 1000    Sample 800 / 1000    Sample 810 / 1000    Sample 820 / 1000    Sample 830 / 1000    Sample 840 / 1000    Sample 850 / 1000    Sample 860 / 1000    Sample 870 / 1000    Sample 880 / 1000    Sample 890 / 1000    Sample 900 / 1000    Sample 910 / 1000    Sample 920 / 1000    Sample 930 / 1000    Sample 940 / 1000    Sample 950 / 1000    Sample 960 / 1000    Sample 970 / 1000    Sample 980 / 1000    Sample 990 / 1000    Sample 1000 / 1000    Sample 1000 / 1000
    Elapsed time: 6.530591249465942




.. GENERATED FROM PYTHON SOURCE LINES 170-175

Plotting the results
--------------------

Let is first look at the estimated noise level
and compare it with the true noise level

.. GENERATED FROM PYTHON SOURCE LINES 175-178

.. code-block:: default


    samples["s"].plot_trace(exact=1/0.01**2)




.. image-sg:: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_003.png
   :alt: s, s
   :srcset: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([[<Axes: title={'center': 's'}>, <Axes: title={'center': 's'}>]],
          dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 179-181

We see that the estimated noise level is close to the true noise level. Let's
now look at the estimated solution

.. GENERATED FROM PYTHON SOURCE LINES 181-186

.. code-block:: default



    samples["x"].plot_ci(exact=info.exactSolution)





.. image-sg:: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_004.png
   :alt: UQ in Deconvolution1D
   :srcset: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<matplotlib.lines.Line2D object at 0x7f0e998394e0>, <matplotlib.lines.Line2D object at 0x7f0e99839810>, <matplotlib.collections.PolyCollection object at 0x7f0e998390c0>]



.. GENERATED FROM PYTHON SOURCE LINES 187-188

We can even plot traces of "x" for a few cases and compare

.. GENERATED FROM PYTHON SOURCE LINES 188-190

.. code-block:: default

    samples["x"].plot_trace(exact=info.exactSolution)




.. image-sg:: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_005.png
   :alt: x6, x6, x24, x24, x41, x41, x74, x74, x79, x79
   :srcset: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Selecting 5 randomly chosen variables

    array([[<Axes: title={'center': 'x6'}>, <Axes: title={'center': 'x6'}>],
           [<Axes: title={'center': 'x24'}>, <Axes: title={'center': 'x24'}>],
           [<Axes: title={'center': 'x41'}>, <Axes: title={'center': 'x41'}>],
           [<Axes: title={'center': 'x74'}>, <Axes: title={'center': 'x74'}>],
           [<Axes: title={'center': 'x79'}>, <Axes: title={'center': 'x79'}>]],
          dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 191-192

And finally we note that the UQ method does this analysis automatically and shows a selected number of plots

.. GENERATED FROM PYTHON SOURCE LINES 192-194

.. code-block:: default

    BP.UQ(exact={"x": info.exactSolution, "s": 1/0.01**2})




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_006.png
         :alt: UQ in Deconvolution1D
         :srcset: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_007.png
         :alt: s, s
         :srcset: /user/_auto_tutorials/images/sphx_glr_UQ_in_Deconvolution1D_007.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing 1000 samples
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    !!! Automatic sampler selection is experimental. !!!
    !!!    Always validate the computed results.     !!!
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    Using Gibbs sampler
    burn-in: 20%

    Automatically determined sampling strategy:
            x: LinearRTO
            s: Conjugate

    Warmup 2 / 200    Warmup 4 / 200    Warmup 6 / 200    Warmup 8 / 200    Warmup 10 / 200    Warmup 12 / 200    Warmup 14 / 200    Warmup 16 / 200    Warmup 18 / 200    Warmup 20 / 200    Warmup 22 / 200    Warmup 24 / 200    Warmup 26 / 200    Warmup 28 / 200    Warmup 30 / 200    Warmup 32 / 200    Warmup 34 / 200    Warmup 36 / 200    Warmup 38 / 200    Warmup 40 / 200    Warmup 42 / 200    Warmup 44 / 200    Warmup 46 / 200    Warmup 48 / 200    Warmup 50 / 200    Warmup 52 / 200    Warmup 54 / 200    Warmup 56 / 200    Warmup 58 / 200    Warmup 60 / 200    Warmup 62 / 200    Warmup 64 / 200    Warmup 66 / 200    Warmup 68 / 200    Warmup 70 / 200    Warmup 72 / 200    Warmup 74 / 200    Warmup 76 / 200    Warmup 78 / 200    Warmup 80 / 200    Warmup 82 / 200    Warmup 84 / 200    Warmup 86 / 200    Warmup 88 / 200    Warmup 90 / 200    Warmup 92 / 200    Warmup 94 / 200    Warmup 96 / 200    Warmup 98 / 200    Warmup 100 / 200    Warmup 102 / 200    Warmup 104 / 200    Warmup 106 / 200    Warmup 108 / 200    Warmup 110 / 200    Warmup 112 / 200    Warmup 114 / 200    Warmup 116 / 200    Warmup 118 / 200    Warmup 120 / 200    Warmup 122 / 200    Warmup 124 / 200    Warmup 126 / 200    Warmup 128 / 200    Warmup 130 / 200    Warmup 132 / 200    Warmup 134 / 200    Warmup 136 / 200    Warmup 138 / 200    Warmup 140 / 200    Warmup 142 / 200    Warmup 144 / 200    Warmup 146 / 200    Warmup 148 / 200    Warmup 150 / 200    Warmup 152 / 200    Warmup 154 / 200    Warmup 156 / 200    Warmup 158 / 200    Warmup 160 / 200    Warmup 162 / 200    Warmup 164 / 200    Warmup 166 / 200    Warmup 168 / 200    Warmup 170 / 200    Warmup 172 / 200    Warmup 174 / 200    Warmup 176 / 200    Warmup 178 / 200    Warmup 180 / 200    Warmup 182 / 200    Warmup 184 / 200    Warmup 186 / 200    Warmup 188 / 200    Warmup 190 / 200    Warmup 192 / 200    Warmup 194 / 200    Warmup 196 / 200    Warmup 198 / 200    Warmup 200 / 200    Warmup 200 / 200
    Sample 10 / 1000    Sample 20 / 1000    Sample 30 / 1000    Sample 40 / 1000    Sample 50 / 1000    Sample 60 / 1000    Sample 70 / 1000    Sample 80 / 1000    Sample 90 / 1000    Sample 100 / 1000    Sample 110 / 1000    Sample 120 / 1000    Sample 130 / 1000    Sample 140 / 1000    Sample 150 / 1000    Sample 160 / 1000    Sample 170 / 1000    Sample 180 / 1000    Sample 190 / 1000    Sample 200 / 1000    Sample 210 / 1000    Sample 220 / 1000    Sample 230 / 1000    Sample 240 / 1000    Sample 250 / 1000    Sample 260 / 1000    Sample 270 / 1000    Sample 280 / 1000    Sample 290 / 1000    Sample 300 / 1000    Sample 310 / 1000    Sample 320 / 1000    Sample 330 / 1000    Sample 340 / 1000    Sample 350 / 1000    Sample 360 / 1000    Sample 370 / 1000    Sample 380 / 1000    Sample 390 / 1000    Sample 400 / 1000    Sample 410 / 1000    Sample 420 / 1000    Sample 430 / 1000    Sample 440 / 1000    Sample 450 / 1000    Sample 460 / 1000    Sample 470 / 1000    Sample 480 / 1000    Sample 490 / 1000    Sample 500 / 1000    Sample 510 / 1000    Sample 520 / 1000    Sample 530 / 1000    Sample 540 / 1000    Sample 550 / 1000    Sample 560 / 1000    Sample 570 / 1000    Sample 580 / 1000    Sample 590 / 1000    Sample 600 / 1000    Sample 610 / 1000    Sample 620 / 1000    Sample 630 / 1000    Sample 640 / 1000    Sample 650 / 1000    Sample 660 / 1000    Sample 670 / 1000    Sample 680 / 1000    Sample 690 / 1000    Sample 700 / 1000    Sample 710 / 1000    Sample 720 / 1000    Sample 730 / 1000    Sample 740 / 1000    Sample 750 / 1000    Sample 760 / 1000    Sample 770 / 1000    Sample 780 / 1000    Sample 790 / 1000    Sample 800 / 1000    Sample 810 / 1000    Sample 820 / 1000    Sample 830 / 1000    Sample 840 / 1000    Sample 850 / 1000    Sample 860 / 1000    Sample 870 / 1000    Sample 880 / 1000    Sample 890 / 1000    Sample 900 / 1000    Sample 910 / 1000    Sample 920 / 1000    Sample 930 / 1000    Sample 940 / 1000    Sample 950 / 1000    Sample 960 / 1000    Sample 970 / 1000    Sample 980 / 1000    Sample 990 / 1000    Sample 1000 / 1000    Sample 1000 / 1000
    Elapsed time: 6.558551073074341
    Plotting results

    {'x': <cuqi.samples._samples.Samples object at 0x7f0e995d5b10>, 's': <cuqi.samples._samples.Samples object at 0x7f0e99073f40>}




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.874 seconds)


.. _sphx_glr_download_user__auto_tutorials_UQ_in_Deconvolution1D.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: UQ_in_Deconvolution1D.py <UQ_in_Deconvolution1D.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: UQ_in_Deconvolution1D.ipynb <UQ_in_Deconvolution1D.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
